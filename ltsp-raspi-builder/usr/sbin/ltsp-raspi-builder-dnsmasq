#!/bin/bash

# Preguntamos variables al usuario

# interfaz de red interna
for i in `cat /proc/net/dev |  grep ":" | tr -s " " | sed "s/^[ \t]*//" | cut -f1 -d":"`; do
        ip="`ifconfig ${i} | grep "inet " | tr -s " " |  sed "s/^[ \t]*//" | cut -d" " -f 2`"
        [ -z $ip ] && ip="-"
        opciones="${opciones} ${i} ${ip}"
done

############## Variable para guardar la tarjeta de la red interna ###########
DHCP_INTERFACE=`zenity --list --title="Interfaz de la red interna" --column="Interfaz" --column="Dirección actual" $opciones`

# Se podria hacer que si se ha seleccionado anteriormente una tarjeta de red en para
# la variable  DHCP_INTERFACES no apareciera la tarjeta anteriormente selccionada
############## Variable para guardar la tarjeta de la red externa ###########
EXTERNAL_INTERFACE=`zenity --list --title="Interfaz de la red EXTERNA" --column="Interfaz" --column="Dirección actual" $opciones`

# Si no se indica interfaz interna salimos con error
[ "${DHCP_INTERFACE}" == "" ] && exit -1
# Si no se indica interfaz EXTERNA salimos con error
[ "${EXTERNAL_INTERFACE}" == "" ] && exit -1

### Recuadro que nos va permitir recoguer en un array los datos que nos pase el usuario. ###
DATA=`zenity --forms --title="Configuración de red" \
   --text="Indique los siguientes valores para configurar la red interna" \
   --add-entry="Dirección IP" \
   --add-entry="Máscara de red en bits" \
   --add-entry="DCHP: Dominio para los clientes" \
   --add-entry="DCHP: IP inicial" \
   --add-entry="DCHP: IP final" \
   --add-entry="DNS Externo" \
   --add-entry="DNS Externo 2" \
   
   `   

### Variables a las que les vamos a asignar los valores del array anterior para poder aplicarlas en la configuracion ###
INTERNAL_IP=`echo ${DATA} | cut -d"|" -f "1"` #IP de red interna
INTERNAL_MASK=`echo ${DATA} | cut -d"|" -f "2"` #Bits de Mascara de red interna
DNS_SERVER=`echo ${INTERNAL_IP}`    #IP DNS del servidor
DOMAIN_NAME=`echo ${DATA} | cut -d"|" -f "3"` #Nombre del dominio del servidor
RANGE_INI=`echo ${DATA} | cut -d"|" -f "4"` #Rango en la que empieza las ips de concesion del dhcp
RANGE_END=`echo ${DATA} | cut -d"|" -f "5"` #Rango en la que terminan las ips de concesion del dhcp
DNS_EXTERNAL=`echo ${DATA} | cut -d"|" -f "6"` #DNS externo para el servidor
DNS_EXTERNALTWO=`echo ${DATA} | cut -d"|" -f "7"` #Segundo DNS externo para el servidor

#echo "INTERNAL_IP: ${INTERNAL_IP}"
#echo "DNS_SERVER: ${DNS_SERVER}"
#echo "DOMAIN_NAME: ${DOMAIN_NAME}"
#echo "RANGE_INI: ${RANGE_INI}"
#echo "RANGE_END: ${RANGE_END}"

############ Variables extras ############
## Assignamos el nombre del equipo para utilizarlo mas tarde.
NAME_SERVER=`cat /etc/hostname | tr -s " " | cut -f 1 -d" "` 

function render_template() {
  eval "echo \"$(cat $1)\""
}

### Funcion para configurar el dnsmasq, que nos permite utilizar las variables anteriores###
function generate_dnsmasq_conf {
  echo "# Generando el fichero /etc/dnsmasq/ltsp.conf"
  render_template /var/lib/ltsp-raspi-builder/templates/dnsmasq.template > /etc/dnsmasq.d/ltsp.conf
  #render_template /var/lib/ltsp-raspi-builder/templates/dnsmasq.template > /tmp/ltsp.conf # Para tests
}

### Funcion para configurar el netplan que nos permite utilizar las variables anteriores###
function generate_network_conf {
  echo "# Generando el fichero /etc/netplan/50-static-internal-interface.yaml "
  render_template /var/lib/ltsp-raspi-builder/templates/50-static-internal-interface.yaml.template  > /etc/netplan/50-static-internal-interface.yaml 
  #render_template /var/lib/ltsp-raspi-builder/templates/50-static-internal-interface.yaml.template > /tmp/50-static-internal-interface.yaml # Para tests
}

function generate_dirs_dnsmasq {
#Creamos las siguientes carpetas para que no de errores al iniciar el servicio de dnsmasq 

    mkdir -p /var/lib/dnsmasq/{macs,config,hosts}
    
    #Añadimos la siguente linea al  archivo server para que el dnsmasq sepa quien es el servidor
    echo "${INTERNAL_IP} ${NAME_SERVER}.${DOMAIN_NAME}" > /var/lib/dnsmasq/hosts/server 
    #Añadimos dos dns al archivo extra-dns para que el dnsmasq no nos de error por falta de dns
    echo -e "server=${DNS_EXTERNAL} \nserver=${DNS_EXTERNALTWO}"> /var/lib/dnsmasq/config/extra-dns
    #Descomentamos la linea en resolved.conf para que no aparezcan problemas con el resolv y el dnsmasq
    sed -i 's/#DNSStubListener=yes/DNSStubListener=no/g' /etc/systemd/resolved.conf


return 0

}

### Funcion para preparar el sistema para que nos permita añadir las siguientes lineas
# dentro del archivo /etc/environment para asi guardar las variables en el entorno
# para poder utilizarlas para crear el archivo cmdline.txt para configurar el arranque de
# la raspberry y tambien para crear un script con reglas de iptbales para enrrutar los paquetes
# de la red interna con la externa.
function preparedsd {

    #Crearemos las siguientes globales para asi poder utilizar los valores en otras configuraciones.

    #Borramos la linea INTERNAL_IP de /etc/environment si existe.
    sed -i "/INTERNAL_IP/d" /etc/environment
    #Añadimos la variable INTERNAL_IP al /etc/environment para hacerla global con el contenido de la variable 
    #INTERNAL_IP que es la ip que nos pasara el usuario para assignar la ip del servidor.
    echo "INTERNAL_IP=${INTERNAL_IP}" >> /etc/environment 

    #Borramos la linea EXTERNAL_INTERFACE de /etc/environment si existe.
    sed -i "/EXTERNAL_INTERFACE/d" /etc/environment
    #Añadimos la variable EXTERNAL_INTERFACE al /etc/environment para hacerla global con el contenido 
    #de la variable  EXTERNAL_INTERFACE que es la tarjeta de red interna del servidor.
    echo "EXTERNAL_INTERFACE=${EXTERNAL_INTERFACE}" >> /etc/environment 

}


function prepareRouting {
  # Añade las reglas de iptables para dar acceso a Internet a los clientes


  if [ "${INTERNAL_IP}" != "" ]; then      
    IP=`ipcalc ${INTERNAL_IP} | grep Network | tr -s " " | cut -f 2 -d" "`
  fi

  echo "# Generando el fichero /usr/sbin/routing"
  render_template /var/lib/ltsp-raspi-builder/templates/routing.template > /usr/sbin/routing
  chmod +x /usr/sbin/routing

  # Ponemos en marcha el servicio
  systemctl enable --now routing
}


### Inicializacion de las variables ###
# Nos mostrara el processo en una pestaña emerguente del processo de instalacion.
(generate_dirs_dnsmasq &&
 generate_dnsmasq_conf && 
 generate_network_conf && 
 echo "# Aplicando configuración de red" && 
 netplan apply &&
 echo "# Activando routing" && 
 prepareRouting &&
 echo "# Finalizado") | tee >(zenity --progress --pulsate --title "Aplicando cambios" )

# Falta afegir la resta de configuració si és necessària (pàgina 38, etc)
# I afegir les regles d'iptables

